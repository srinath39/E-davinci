{"version":3,"sources":["shared/context/auth-context.js","shared/components/FormElements/Button.js","shared/components/UIElements/LoadingSpinner.js","shared/components/UIElements/Backdrop.js","serviceWorkerRegistration.js","shared/components/Navigation/MainHeader.js","shared/components/Navigation/NavLinks.js","shared/components/Navigation/SideDrawer.js","shared/components/Navigation/MainNavigation.js","App.js","index.js"],"names":["AuthContext","createContext","token","userId","login","logout","Button","props","href","className","size","inverse","danger","children","to","exact","type","onClick","disabled","LoadingSpinner","asOverlay","Backdrop","ReactDOM","createPortal","document","getElementById","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","MainHeader","NavLinks","auth","useContext","isLoggedIn","SideDrawer","content","CSSTransition","in","show","timeout","classNames","mountOnEnter","unmountOnExit","reset","MainNavigation","useState","bool","setBool","logoutTimer","App","routes","Users","React","lazy","NewPlace","UserPlaces","UpdatePlace","Auth","setToken","setUserId","expirationTimeDate","setExpirationTimeDate","useCallback","uid","expirationTime","Date","getTime","localStorage","setItem","JSON","stringify","expiration","toISOString","removeItem","useEffect","remainingTime","setTimeout","clearTimeout","storage","parse","getItem","path","Provider","value","fallback","render","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.ffa0ff24.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nexport const AuthContext = createContext({\r\n  token: null,\r\n  userId: null,\r\n  login: () => {},\r\n  logout: () => {},\r\n});\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './Button.css';\r\n\r\nconst Button = props => {\r\n  if (props.href) {\r\n    return (\r\n      <a\r\n        className={`button button--${props.size || 'default'} ${props.inverse &&\r\n          'button--inverse'} ${props.danger && 'button--danger'}`}\r\n        href={props.href}\r\n      >\r\n        {props.children}\r\n      </a>\r\n    );\r\n  }\r\n  if (props.to) {\r\n    return (\r\n      <Link\r\n        to={props.to}\r\n        exact={props.exact}\r\n        className={`button button--${props.size || 'default'} ${props.inverse &&\r\n          'button--inverse'} ${props.danger && 'button--danger'}`}\r\n      >\r\n        {props.children}\r\n      </Link>\r\n    );\r\n  }\r\n  return (\r\n    <button\r\n      className={`button button--${props.size || 'default'} ${props.inverse &&\r\n        'button--inverse'} ${props.danger && 'button--danger'}`}\r\n      type={props.type}\r\n      onClick={props.onClick}\r\n      disabled={props.disabled}\r\n    >\r\n      {props.children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\n\nimport './LoadingSpinner.css';\n\nconst LoadingSpinner = props => {\n  return (\n    <div className={`${props.asOverlay && 'loading-spinner__overlay'}`}>\n      <div className=\"lds-dual-ring\"></div>\n    </div>\n  );\n};\n\nexport default LoadingSpinner;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './Backdrop.css';\r\n\r\nconst Backdrop = props => {\r\n  return ReactDOM.createPortal(\r\n    <div className=\"backdrop\" onClick={props.onClick}></div>,\r\n    document.getElementById('backdrop-hook')\r\n  );\r\n};\r\n\r\nexport default Backdrop;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport './MainHeader.css';\r\n\r\nexport default function MainHeader(props)\r\n{\r\n    return (<><header className='main-header'>{props.children}</header></>);\r\n}","import React,{useContext} from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport { AuthContext } from '../../context/auth-context';\r\nimport Button from '../FormElements/Button';\r\nimport './NavLinks.css';\r\nexport default function NavLinks()\r\n{\r\n    const auth=useContext(AuthContext);\r\n    \r\n    return (<>\r\n    <ul className='nav-links'>\r\n        <li>\r\n            <NavLink to=\"/\" exact>ALL USERS</NavLink>\r\n        </li>\r\n        {auth.isLoggedIn && <li>\r\n            <NavLink to={`/${auth.userId}/places`}>MY PLACES</NavLink>\r\n        </li>}\r\n        {auth.isLoggedIn && <li>\r\n            <NavLink to=\"/place/new\">ADD PLACE</NavLink>\r\n        </li>}\r\n        {!auth.isLoggedIn &&<li>\r\n            <NavLink to=\"/auth\">Authentication</NavLink>\r\n        </li>}\r\n        {auth.isLoggedIn && <li>\r\n            <Button onClick={auth.logout}>LOGOUT</Button>\r\n        </li>}\r\n    </ul>\r\n    </>);\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport './SideDrawer.css';\r\n\r\n\r\nexport default function SideDrawer(props)\r\n{\r\n    const content= <CSSTransition in={props.show} timeout={200} classNames=\"slide-in-left\" mountOnEnter unmountOnExit>\r\n        <aside className='side-drawer' onClick={props.reset}>{props.children}</aside>\r\n    </CSSTransition>;\r\n    return ReactDOM.createPortal(content,document.getElementById('drawer-hook'));\r\n};","import React from \"react\";\r\nimport MainHeader from './MainHeader';\r\nimport NavLinks from \"./NavLinks\";\r\nimport SideDrawer from './SideDrawer';\r\nimport Backdrop from '../UIElements/Backdrop';\r\nimport {Link} from 'react-router-dom';\r\nimport { useState } from \"react\";\r\nimport './MainNavigation.css';\r\n\r\nexport default function MainNavigation()\r\n{\r\n    const [bool,setBool]=useState(false);\r\n    return (\r\n        <>   \r\n        {bool && <Backdrop onClick={()=>{setBool(false)}}/>}\r\n        <SideDrawer show={bool} reset={()=>setBool(false)}>\r\n            <nav className=\"main-navigation__drawer-nav\">\r\n                <NavLinks/>\r\n            </nav>\r\n        </SideDrawer>\r\n        <MainHeader>\r\n            <button className=\"main-navigation__menu-btn\" onClick={()=>{setBool(true)}}>\r\n            <span />\r\n            <span />\r\n            <span />\r\n            </button>\r\n            <h1 className=\"main-navigation__title\">\r\n                <Link to=\"/\">E-davinci</Link>\r\n            </h1>\r\n            <nav className=\"main-navigation__header-nav\">\r\n                <NavLinks/>\r\n            </nav>\r\n        </MainHeader>\r\n        </>\r\n        );\r\n};","import React, { useState, useCallback, useEffect, Suspense } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from \"react-router-dom\";\n\n// import Users from \"./users/pages/Users\";\n// import NewPlace from \"./places/pages/NewPlace\";\n// import UserPlaces from \"./places/pages/UserPlaces\";\n// import UpdatePlace from \"./places/pages/UpdatePlace\";\n// import Auth from \"./users/pages/Auth\";\nimport MainNavigation from \"./shared/components/Navigation/MainNavigation\";\nimport { AuthContext } from \"./shared/context/auth-context\";\nimport LoadingSpinner from \"./shared/components/UIElements/LoadingSpinner\";\n\nlet logoutTimer;\n\nconst App = () => {\n  const Users = React.lazy(() => import(\"./users/pages/Users\"));\n  const NewPlace = React.lazy(() => import(\"./places/pages/NewPlace\"));\n  const UserPlaces = React.lazy(() => import(\"./places/pages/UserPlaces\"));\n  const UpdatePlace = React.lazy(() => import(\"./places/pages/UpdatePlace\"));\n  const Auth = React.lazy(() => import(\"./users/pages/Auth\"));\n\n  const [token, setToken] = useState(null);\n  const [userId, setUserId] = useState(null);\n  const [expirationTimeDate, setExpirationTimeDate] = useState(null);\n\n  const login = useCallback((uid, token, expirationTime) => {\n    setToken(token);\n    setUserId(uid);\n    const expirationTimeDate =\n      expirationTime || new Date(new Date().getTime() + 1000 * 60 * 60);\n    setExpirationTimeDate(expirationTimeDate);\n    localStorage.setItem(\n      \"userData\",\n      JSON.stringify({\n        userId: uid,\n        token: token,\n        expiration: expirationTimeDate.toISOString(), // converts the date to string later convert back to date by passing the string to new Date() as a constructor\n      })\n    );\n  }, []);\n\n  const logout = useCallback(() => {\n    setToken(null);\n    setUserId(null);\n    setExpirationTimeDate(null);\n    localStorage.removeItem(\"userData\");\n  }, []);\n\n  useEffect(() => {\n    if (token && expirationTimeDate) {\n      const remainingTime =\n        new Date(expirationTimeDate).getTime() - new Date().getTime();\n      logoutTimer = setTimeout(logout, remainingTime);\n    } else {\n      clearTimeout(logoutTimer);\n    }\n  }, [token, logout, expirationTimeDate]);\n\n  useEffect(() => {\n    let storage = JSON.parse(localStorage.getItem(\"userData\"));\n    if (storage && storage.token) {\n      if (new Date(storage.expiration) > new Date()) {\n        login(storage.userId, storage.token, new Date(storage.expiration));\n      }\n    }\n  }, [login, logout]);\n\n  let routes;\n\n  if (token) {\n    routes = (\n      <Switch>\n        <Route path=\"/\" exact>\n          <Users />\n        </Route>\n        <Route path=\"/:userId/places\" exact>\n          <UserPlaces />\n        </Route>\n        <Route path=\"/place/new\" exact>\n          <NewPlace />\n        </Route>\n        <Route path=\"/place/:placeId\">\n          <UpdatePlace />\n        </Route>\n        <Redirect to=\"/\" />\n      </Switch>\n    );\n  } else {\n    routes = (\n      <Switch>\n        <Route path=\"/\" exact>\n          <Users />\n        </Route>\n        <Route path=\"/auth\">\n          <Auth />\n        </Route>\n        <Route path=\"/:userId/places\" exact>\n          <UserPlaces />\n        </Route>\n        <Redirect to=\"/auth\" />\n      </Switch>\n    );\n  }\n\n  return (\n    <AuthContext.Provider\n      value={{\n        isLoggedIn: !!token,\n        token: token,\n        userId: userId,\n        login: login,\n        logout: logout,\n      }}\n    >\n      <Router>\n        <MainNavigation />\n        <main>\n          <Suspense\n            fallback={\n              <div className=\"center\">\n                <LoadingSpinner />\n              </div>\n            }\n          >\n            {routes}\n          </Suspense>\n        </main>\n      </Router>\n    </AuthContext.Provider>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\n\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}